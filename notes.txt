https://bitcoinsv.io/documentation/miners/settings/
https://github.com/bitpay/bitcore-p2p/blob/master/lib/messages/message.js

https://en.bitcoin.it/wiki/Protocol_documentation#getheaders

getheaders

Return a headers packet containing the headers of blocks starting right after the last known hash in the block locator object, up to hash_stop or 2000 blocks, whichever comes first. To receive the next block headers, one needs to issue getheaders again with a new block locator object. Keep in mind that some clients may provide headers of blocks which are invalid if the block locator object contains a hash on the invalid branch.

Payload:
Field Size 	Description 	Data type 	Comments
4 	    version 	    uint32_t 	the protocol version
1+ 	    hash count 	    var_int 	number of block locator hash entries
32+ 	block locator   hashes 	char[32] 	block locator object; newest back to genesis block (dense to start, but then sparse)
32 	    hash_stop 	    char[32] 	hash of the last desired block header; set to zero to get as many blocks as possible (2000)

For the block locator object in this packet, the same rules apply as for the getblocks packet. 

netMagic[0] = 0xe3;
netMagic[1] = 0xe1;
netMagic[2] = 0xf3;
netMagic[3] = 0xe8;
nDefaultPort = 8333;
nPruneAfterHeight = 100000;

// Bitcoin SV seeder
vSeeds.push_back(CDNSSeedData("bitcoinsv.io", "seed.bitcoinsv.io", true));
// cascharia.com
vSeeds.push_back(CDNSSeedData("cascharia.com", "seed.cascharia.com", true));
// satoshisvision.network
vSeeds.push_back(CDNSSeedData("satoshisvision.network", "seed.satoshisvision.network", true));


netMagic[0] = 0xf4;
netMagic[1] = 0xe5;
netMagic[2] = 0xf3;
netMagic[3] = 0xf4;
nDefaultPort = 18333;
nPruneAfterHeight = 1000;
vSeeds.push_back(CDNSSeedData("bitcoinsv.io", "testnet-seed.bitcoinsv.io", true));
vSeeds.push_back(CDNSSeedData("cascharia.com", "testnet-seed.cascharia.com", true));
vSeeds.push_back(CDNSSeedData("bitcoincloud.net", "testnet-seed.bitcoincloud.net", true));

bethebroadcast.com

/** What block version to use for new blocks (pre versionbits) */
static const int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;
/** Version bits are not used anymore.
    This variable is used in assembler.cpp for consistency with old code and to set the version of block that we are going to mine. */
static const int32_t VERSIONBITS_TOP_BITS = 0x20000000UL;
